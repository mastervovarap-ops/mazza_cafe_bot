import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ (.env)
load_dotenv()

# –ß–∏—Ç–∞—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Render –∞–±–æ .env)
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–∞–Ω –¥–ª—è FSM
class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_phone = State()

# –ö–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_cart = {}

# –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü•ò –ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏", callback_data="cat_first")],
        [InlineKeyboardButton(text="üçñ –î—Ä—É–≥—ñ —Å—Ç—Ä–∞–≤–∏", callback_data="cat_second")],
        [InlineKeyboardButton(text="ü•ó –°–∞–ª–∞—Ç–∏", callback_data="cat_salad")],
        [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="cart")],
    ])
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã –Ø –±–æ—Ç Mazza Cafe! –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=main_menu())

# –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
@dp.callback_query(lambda c: c.data.startswith("cat_"))
async def category_handler(callback: types.CallbackQuery):
    category = callback.data
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°—Ç—Ä–∞–≤–∞ 1", callback_data=f"add_{category}_1")],
        [InlineKeyboardButton(text="‚ûï –°—Ç—Ä–∞–≤–∞ 2", callback_data=f"add_{category}_2")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")],
    ])
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É:", reply_markup=kb)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —É –∫–æ—à–∏–∫
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item = callback.data.replace("add_", "")
    user_cart.setdefault(user_id, []).append(item)
    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ —É –∫–æ—à–∏–∫!")

# –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫
@dp.callback_query(lambda c: c.data == "cart")
async def show_cart(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    items = user_cart.get(user_id, [])
    if not items:
        await callback.message.edit_text("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
        return
text = "üìã –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" + "\n".join([f"- {i}" for i in items])
text += "\n\n–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:"

    await state.set_state(OrderState.waiting_for_name)
    await callback.message.edit_text(text)

# –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º‚Äô—è
@dp.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderState.waiting_for_address)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É:")

# –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É
@dp.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(OrderState.waiting_for_phone)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

# –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏
@dp.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    name, address, phone = data["name"], data["address"], message.text
    items = user_cart.get(user_id, [])
    
    order_text = (
        f"üì¶ <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n"
        f"üë§ –Ü–º‚Äô—è: {name}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        f"üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" + "\n".join([f"- {i}" for i in items])
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–¥–º—ñ–Ω—É
    if ADMIN_USER_ID:
        try:
            await bot.send_message(int(ADMIN_USER_ID), order_text)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É: {e}")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–ª—ñ—î–Ω—Ç—É
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.")
    user_cart[user_id] = []
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
