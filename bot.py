import os
import logging
from aiogram import Bot, Dispatcher, executor, types

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã –¶–µ –±–æ—Ç *Mazza Cafe*!\n–ù–∞—Ç–∏—Å–Ω–∏ /menu —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –º–µ–Ω—é.", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /menu
@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("ü•ô –®–∞—É—Ä–º–∞", callback_data="order:–®–∞—É—Ä–º–∞"))
    keyboard.add(types.InlineKeyboardButton("üçõ –ü–ª–æ–≤", callback_data="order:–ü–ª–æ–≤"))
    keyboard.add(types.InlineKeyboardButton("ü•ü –ß–µ–±—É—Ä–µ–∫", callback_data="order:–ß–µ–±—É—Ä–µ–∫"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É:", reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.callback_query_handler(lambda c: c.data.startswith("order:"))
async def process_order(callback: types.CallbackQuery):
    item = callback.data.split(":", 1)[1]
    user = callback.from_user

    order_text = f"üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @{user.username or user.id}\n–°—Ç—Ä–∞–≤–∞: {item}"

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–¥–º—ñ–Ω—É
    if ADMIN_USER_ID:
        try:
            await bot.send_message(ADMIN_USER_ID, order_text)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É: {e}")

    await callback.message.answer(f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è '{item}' –ø—Ä–∏–π–Ω—è—Ç–µ!")
    await callback.answer()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
