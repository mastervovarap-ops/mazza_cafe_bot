
import asyncio
import logging
import os
from dataclasses import dataclass
from typing import Dict, List, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ BOT_TOKEN —É .env")

logging.basicConfig(level=logging.INFO)

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

LANG_UA = "uk"
LANG_RU = "ru"

STRINGS = {
    LANG_UA: {
        "greet": "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –º–æ–≤—É / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "menu": "–ú–µ–Ω—é",
        "cart": "–ö–æ—à–∏–∫",
        "checkout": "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "add_to_cart": "–î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫ ‚úÖ",
        "empty_cart": "–¢–≤—ñ–π –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.",
        "cart_title": "üõí –ö–æ—à–∏–∫",
        "total": "–†–∞–∑–æ–º",
        "ask_address": "–í–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        "ask_phone": "–í–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        "order_sent": "–î—è–∫—É—î–º–æ! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É.",
        "whoami": "–¢–≤—ñ–π chat_id: <code>{}</code>",
        "lang_set": "–ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶",
        "categories": {
            "first": "üç≤ –ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏",
            "second": "üçõ –î—Ä—É–≥—ñ —Å—Ç—Ä–∞–≤–∏",
            "main": "üçñ –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä–∞–≤–∏"
        }
    },
    LANG_RU: {
        "greet": "–ü—Ä–∏–≤–µ—Ç! –û–±–µ—Ä–∏ –º–æ–≤—É / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "menu": "–ú–µ–Ω—é",
        "cart": "–ö–æ—Ä–∑–∏–Ω–∞",
        "checkout": "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "add_to_cart": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ",
        "empty_cart": "–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
        "cart_title": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
        "total": "–ò—Ç–æ–≥–æ",
        "ask_address": "–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        "ask_phone": "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "order_sent": "–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "whoami": "–¢–≤–æ–π chat_id: <code>{}</code>",
        "lang_set": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π üá∑üá∫",
        "categories": {
            "first": "üç≤ –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞",
            "second": "üçõ –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞",
            "main": "üçñ –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞"
        }
    }
}

# –°–∫–æ—Ä–æ—á–µ–Ω–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
MenuItem = Tuple[str, str, int]
MENU: Dict[str, List[MenuItem]] = {
    "first": [
        ("–ß—É—á–≤–∞—Ä–∞", "–ß—É—á–≤–∞—Ä–∞", 140),
        ("–®—É—Ä–ø–∞", "–®—É—Ä–ø–∞", 130),
    ],
    "second": [
        ("–î–æ–ª–º–∞", "–î–æ–ª–º–∞", 150),
        ("–ü–ª–æ–≤ —É–∑–±–µ—Ü—å–∫–∏–π", "–ü–ª–æ–≤ —É–∑–±–µ–∫—Å–∫–∏–π", 130),
    ],
    "main": [
        ("–®–∞—É—Ä–º–∞ —Å–µ—Ä–µ–¥–Ω—è", "–®–∞—É—Ä–º–∞ —Å—Ä–µ–¥–Ω—è—è", 150),
        ("–ß–µ–±—É—Ä–µ–∫ –∑ —è–ª–æ–≤–∏—á–∏–Ω–æ—é", "–ß–µ–±—É—Ä–µ–∫ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", 90),
    ],
}

@dataclass
class UserData:
    lang: str = LANG_UA
    cart: List[Tuple[str, int]] = None

USERS: Dict[int, UserData] = {}

class OrderFSM(StatesGroup):
    waiting_address = State()
    waiting_phone = State()

def get_user(u_id: int) -> UserData:
    if u_id not in USERS:
        USERS[u_id] = UserData(lang=LANG_UA, cart=[])
    if USERS[u_id].cart is None:
        USERS[u_id].cart = []
    return USERS[u_id]

@dp.message(CommandStart())
async def cmd_start(msg: Message, state: FSMContext):
    u = get_user(msg.from_user.id)
    await state.clear()
    await msg.answer(STRINGS[u.lang]["greet"])

@dp.message(Command("whoami"))
async def cmd_whoami(msg: Message):
    await msg.answer(STRINGS[get_user(msg.from_user.id).lang]["whoami"].format(msg.from_user.id))

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
